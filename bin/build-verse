#!/usr/bin/env coffee
{stdout, stderr, exit, argv} = process
{resolve, join} = require "path"
{exists} = require "fairmont"
fs = require "fs"
harp = require "harp"
system = require "node-system"

[interpreter, script, source, destination] = argv

log = (string) -> stdout.write( string + "\n" )
abort = (string) -> stderr.write( string + "\n" ); exit(-1)


readFilesRecursive = (from) ->
  fileContent = []
  dirContent = []
  files = fs.readdirSync(from)
  for file in files
    file = "#{from}/#{file}"
    stat = fs.statSync(file)
    if stat and stat.isDirectory()
      dirContent = dirContent.concat(readFilesRecursive(file))
    else
      fileContent.push(fs.readFileSync(file))
  fileContent.concat(dirContent)

deleteDirRecursive = (path) ->
    if fs.existsSync(path)
      files = fs.readdirSync(path);
      for file in files
        curPath = path + "/" + file
        if fs.lstatSync(curPath).isDirectory()
          deleteDirRecursive(curPath)
        else
          fs.unlinkSync(curPath)
      fs.rmdirSync(path)

buildSite = (source, destination, callback) ->
  from = resolve __dirname, "..", source
  to = resolve __dirname, "..", destination, "www"
  fs.mkdirSync to unless exists(to)

  abort "Source does not exist: #{from}" unless exists(from)
  abort "Destination does not exist: #{to}" unless exists(to)

  log "Generating site from input files in #{from} ..."

  harp.compile from, to, (err) ->
    abort err if err?
    callback()

buildGSS = (source, destination) ->
  from = resolve __dirname, "..", source, "public/gss"
  to = resolve __dirname, "..", destination, "export/gss"
  wwwGSSPath = resolve __dirname, "..", destination, "www/gss"
  fs.mkdirSync to unless exists(to)
  fs.mkdirSync wwwGSSPath unless exists(wwwGSSPath)

  abort "Source does not exist: #{from}" unless exists(from)
  abort "Destination does not exist: #{to}" unless exists(to)
  abort "Destination does not exist: #{wwwGSSPath}" unless exists(wwwGSSPath)

  log "Generating verse.gss from input files in #{from} ..."

  gss = readFilesRecursive("#{from}").join("\n\n\n")

  fs.writeFileSync "#{to}/verse.gss", gss
  fs.writeFileSync "#{wwwGSSPath}/verse.gss", gss

copyAssets = (source, destination) ->
  # copy fonts
  from = resolve __dirname, "..", source, "public/fonts"
  to = resolve __dirname, "..", destination, "export/fonts"
  fs.mkdirSync to unless exists(to)

  abort "Source does not exist: #{from}" unless exists(from)
  abort "Destination does not exist: #{to}" unless exists(to)

  log "Copying assets from input files in #{from} ..."

  system "cp -rf #{from}/* #{to}"

  # copy stylus
  from = resolve __dirname, "..", source, "public/css"
  to = resolve __dirname, "..", destination, "export/css"
  fs.mkdirSync to unless exists(to)

  abort "Source does not exist: #{from}" unless exists(from)
  abort "Destination does not exist: #{to}" unless exists(to)

  log "Copying assets from input files in #{from} ..."

  system "cp -rf #{from}/* #{to}"

run = ->
  source = "." unless source?
  destination = "build" unless destination?
  
  wwwDir = resolve __dirname, "..", destination, "www"
  deleteDirRecursive wwwDir
  fs.mkdirSync wwwDir unless exists wwwDir

  exportDir = resolve __dirname, "..", destination, "export"
  deleteDirRecursive exportDir
  fs.mkdirSync exportDir unless exists exportDir

  try
    log ""
    buildSite source, destination, ->
      buildGSS source, destination
      copyAssets source, destination
      log "Build completed\n"
  catch error
    abort error

run()